// <auto-generated />
using System;
using InnoClinic.ServicesAPI.Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InnoClinic.ServicesAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20221227113438_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InnoClinic.ServicesAPI.Core.Entities.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c6d093c-c52c-4a9b-709b-08dac166520c"),
                            Price = 100m,
                            ServiceCategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ServiceName = "SomeName1",
                            SpecializationId = new Guid("acc08d75-50ea-4689-84cc-bc4b41138301")
                        },
                        new
                        {
                            Id = new Guid("24d92a89-a088-4687-9947-08dac62592e6"),
                            Price = 90m,
                            ServiceCategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ServiceName = "SomeName2",
                            SpecializationId = new Guid("acc08d75-50ea-4689-84cc-bc4b41138301")
                        },
                        new
                        {
                            Id = new Guid("3a31f073-c35d-4a5c-072f-08dad37b7a49"),
                            Price = 80m,
                            ServiceCategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ServiceName = "SomeName3",
                            SpecializationId = new Guid("acc08d75-50ea-4689-84cc-bc4b41138301")
                        },
                        new
                        {
                            Id = new Guid("d46f387f-86a2-4775-238b-08dad77cc06d"),
                            Price = 70m,
                            ServiceCategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ServiceName = "SomeName4",
                            SpecializationId = new Guid("acc08d75-50ea-4689-84cc-bc4b41138301")
                        },
                        new
                        {
                            Id = new Guid("0d6b7dc6-b351-4b72-ab6a-08dad78540c0"),
                            Price = 60m,
                            ServiceCategoryId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ServiceName = "SomeName5",
                            SpecializationId = new Guid("acc08d75-50ea-4689-84cc-bc4b41138301")
                        });
                });

            modelBuilder.Entity("InnoClinic.ServicesAPI.Core.Entities.Models.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TimeSlotSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            CategoryName = "SomeCategoryName",
                            TimeSlotSize = 0
                        });
                });

            modelBuilder.Entity("InnoClinic.ServicesAPI.Core.Entities.Models.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acc08d75-50ea-4689-84cc-bc4b41138301"),
                            Name = "SpecName1",
                            Status = true
                        });
                });

            modelBuilder.Entity("InnoClinic.ServicesAPI.Core.Entities.Models.Service", b =>
                {
                    b.HasOne("InnoClinic.ServicesAPI.Core.Entities.Models.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnoClinic.ServicesAPI.Core.Entities.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");

                    b.Navigation("Specialization");
                });
#pragma warning restore 612, 618
        }
    }
}
